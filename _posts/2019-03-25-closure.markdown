---
layout:     post
title:      "closure"
subtitle:   " \"A Closure is a function object that remembers values in enclosing scopes even if they are not present in memory.\""
date:       2019-03-25 09:45:29
author:     "yyttmonster"
header-img: "img/post-bg.jpg"
tags:
    - closure
    - python
    - JavaScript
    - decorator
    - AOP
---

最近在写JS的时候，遇到一个bug- ***Mutable Variable is accessible from closure***。我尝试在循环内部使用异步执行函数，此时循环体为一个作用域，每个循环中异步函数都会指向同一个函数外的变量，但在异步函数执行前，循环已经结束，这个变量值已经发生了改变，变量`tem`的值已经是最后一次循环的值了，而这是不允许的，这就牵扯出闭包的一系列问题来。
```javascript
for (var i = 0; i < table.length; i++) { 
  var tem = table[i][0];
  var element = document.createElement("div");  
  element.className = "element";
  // tem --> Mutable Variable is accessible from closure
  element.onclick= function () {  
    document.getElementById("feeling").textContent = tem ;
};
}
```
## LEGB

在了解闭包前，先明确python的作用域规则。
1. 命名空间：表示的是变量的可见范围，是名称到对象的映射（通俗来讲就是给定一个名字，可以找到它是指的哪个对象，这个查找是动态过程），一般通过python**字典**实现。各命名空间相互独立，不同的的命名空间中可以有相同的变量名存在。Python中存在函数范围内的命名空间（局部名称 - 函数被调用时创建，调用完成，函数返回时消亡）、模块范围内的命名空间（全局名称 - 模块被import时创建，解析器退出时消亡）、内建的命名空间（内置名称 - python解析器启动时创建，保留至解析器退出时才消亡）。
2. 作用域：一个python程序可以直接访问命名空间的正文区域，可以是一个函数或一段代码。作用域定义了变量能在多大范围内起作用，它是一种定义的**规则**，由它在源码中的位置决定（静态作用域规则）。
3. LEGB：python含有四种作用域，访问变量时，会从内到外一次访问所有作用域知道找到该变量，访问顺序就是局部（local）-> 闭包（enclosing）-> 全局（global）-> 内建（built-in）。
4. python中只有模块、类、函数才会引入新的作用域，**代码块不会引入**。
5. 修改作用域需要用到global和nonlocal关键字，global可以将变量作用域设为全局，nonlocal在闭包时使用，将内部嵌套函数中的局部变量设为闭包作用域（不是全局作用域）。

## 什么是闭包？

闭包，又称作词法闭包或函数闭包，是指引用了自由变量的函数，这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境。闭包存在于**嵌套函数**中，只有在被调用时才执行操作。
```python
def outerfunc():  
    a = "variable"  
  def innerfunc():  
        print(a)  
    return innerfunc()
    
foo = outerfunc()
# output --> variable
```
```python
def outerfunc():  
    a = "variable"  
  def innerfunc():  
        print(a)  
    return innerfunc  
  
# foo=innerfunc  
foo = outerfunc()  
foo()
# output --> variable
```
上面两段代码运行结果完全一致，但运行过程中却存在着很大的差别。第一段代码中，调用外部函数`outerfunc()`后，返回值是内部函数`innerfunc()`运行结果，内部函数引用了外部函数中声明的变量a，这不足为奇，因为外部函数此时还未运行结束，嵌套函数可以访问外部声明的变量。

但在第二段代码中，外部函数返回的是内部函数而不是其运行结果，而这个返回的内部函数何时运行，不得而知。但其运行时，`outerfunc()`一定已经执行完毕了，那么它内部声明的变量就已经无法访问了，但实际上我们可以访问，这就是因为闭包。它由函数以及创建该函数的词法环境组合而成。**这个环境包含了这个闭包创建时所能访问的所有局部变量**。

***Note***: python规定**所有在赋值语句左面的变量都是局部变量**。如果上述代码定义为：

```python
def outerfunc():  
    a = "variable"  
  def innerfunc():  
        # local variable 'a' referenced before assignment
        a = a+"string"  
        print(a)  
    return innerfunc()
```
因为等号左边的a已经是局部变量了，那么就无法访问外函数中的变量a了，要解决此问题需要使用python3中的nonlocal关键词。

## 闭包的实现

许多语言是面向堆栈的，函数的本地变量都保存在堆栈上，每当函数激活时，这些变量和函数参数都会压栈。当函数返回时，这些参数又会从堆栈中移除。这种方式对于将函数可作为参数值使用的情境存在着限制，特别是当函数持有自由变量时，会出现问题。
 >自由变量：函数中使用，但不是函数参数也不是函数局部变量，例如闭包中，在内部函数中使用但却是在外部函数中声明的变量。

闭包的典型实现方式是定义一个特殊的数据结构，保存了函数地址指针与闭包创建时的函数的词法环境表示。通过将自由变量放进参数表、并扩大函数名字的作用域，可以把一个闭包 / 匿名 / 内部函数变成一个普通的函数，这叫做“Lambda 提升”。

JS中是通过动态分配内存方式配合垃圾回收器以及引用计数实现。详见 [JavaScript内部原理系列－闭包](https://segmentfault.com/a/1190000002452587)

## 闭包的作用

闭包允许将函数与其所操作的某些数据（环境）关联起来，这类似于面向对象编程，因此在我们需要的对象仅有一个方法时，我们就可以使用闭包来优雅的满足这一需求。特别在web页面的js中实现**为响应事件而执行的函数**的时候。
```javascript
function clickfunc() {  
    return function () {  
      document.getElementById("id").textContent = "newContent";
  };  
}
var clickfunction = clickfunc();
document.getElementById('id').onclick = clickfunction;
```
值得注意的是，每个闭包都是引用自己词法作用域内的变量。在一个闭包内对变量的修改，不会影响到另外一个闭包中的变量，这提供了类似面向对象编程的数据的隐藏和封装。

回到文章开头的bug，每个`onclick`得到的都是一个闭包，这些闭包由函数以及变量i作用域中capture到的环境组成。他们在循环中被创建，共享了同一个词法作用域，而循环在事件被触发前机已经结束，变量i已经指向最后一项了。解决办法有三个：

1. 使用更多的闭包，使所有的callback不再共享一个环境（当前用的是匿名闭包）：

```javascript
for (var i = 0; i < table.length; i++) {  
    (function () {  
        var tem = table[i][0];  
  var element = document.createElement("div");  
  element.className = "element";  
  // tem --> Mutable Variable is accessible from closure  
  element.onclick= function () {  
            document.getElementById("feeling").textContent = tem ;  
  };  
  })();  
}
```
2. 避免使用过多的闭包，也可以使用`let`关键词,则每个闭包绑定了块作用域的变量，就不再需要额外的闭包：
  > JS中let不允许重复声明变量，之前var声明过的变量也无法使用let再次声明覆盖，即无法“变量提升”。
  > JS中没有块级作用域，只有全局作用域和函数作用域两种。

   ```javascript
for (var i = 0; i < table.length; i++) { 
  let tem = table[i][0];
  var element = document.createElement("div");  
  element.className = "element";
  // tem --> Mutable Variable is accessible from closure
  element.onclick= function () {  
    document.getElementById("feeling").textContent = tem ;
};
}
   ```
   或者更优雅的方式：
```javascript
for (let i = 0; i < table.length; i++) { 
  var element = document.createElement("div");  
  element.className = "element";
  // tem --> Mutable Variable is accessible from closure
  element.onclick= function () {  
    document.getElementById("feeling").textContent = table[i][0];;
};
}
```

3. 使用一个常量保存该变量值，即用关键字`const`替代`var`：
```javascript
for (var i = 0; i < table.length; i++) { 
  const tem = table[i][0];
  var element = document.createElement("div");  
  element.className = "element";
  // tem --> Mutable Variable is accessible from closure
  element.onclick= function () {  
    document.getElementById("feeling").textContent = tem ;
};
}
```
## 闭包的典型范例 - 装饰器

装饰器其实便是闭包的一种典型应用，只不过传递的是函数。在面向对象编程中，**装饰器模式**是**设计模式**中的一种，可以动态的往一个对象中添加新的行为，同时不改变其结构。在python中，不是在类的层面而是函数层面对函数进行装饰。

***一个装饰器就是一个以被装饰函数为参数，以wrapper函数为闭包，返回值为wrapper函数的一个函数，其特点是wrapper采用了(\*args, \*\*kwargs)即万用参数表作为参数，可以接收任何类型的参数，使用时在被装饰函数前加上`@装饰器名`作为使用装饰器的声明。***

### 装饰器需求

例如要添加一个日志功能：
这部分摘自 [理解 Python 装饰器看这一篇就够了](https://foofish.net/python-decorator.html)

```python
def use_logging(func):
    logging.warn("%s is running" % func.__name__)
    func()

def foo():
    print('i am foo')

use_logging(foo)
```
虽然实现了功能，但破坏了业务逻辑，破坏了原有的代码结构，因为此时我们的原foo()函数变成了use_logging()函数。
### <u>简单装饰器</u>

使用@修饰符，`*args、**kwargs`传递参数增加一层函数嵌套，以便装饰器的参数传递。
```python
def use_logging(level):
    def decorator(func):
        def wrapper(*args, **kwargs):
            if level == "warn":
                logging.warn("%s is running" % func.__name__)
            elif level == "info":
                logging.info("%s is running" % func.__name__)
            return func(*args)
        return wrapper
    return decorator

@use_logging(level="warn")
def foo(name='foo'):
    print("i am %s" % name)
```
### functools.wraps

使用装饰器极大地复用了代码，但是原函数的元信息不见了，比如函数的`docstring`、`__name__`、参数列表，此时就需要`functools.wraps`，`wraps`本身也是一个装饰器，它能把原函数的元信息拷贝到装饰器里面的 func 函数中,这使得装饰器里面的 func 函数也有和原函数 foo 一样的元信息。
``` python
from functools import wraps
def use_logging(level):
    def decorator(func):
    @wraps(func)
        def wrapper(*args, **kwargs):
            if level == "warn":
                logging.warn("%s is running" % func.__name__)
            elif level == "info":
                logging.info("%s is running" % func.__name__)
            return func(*args)
        return wrapper
    return decorator

@use_logging(level="warn")
def foo(name='foo'):
    print("i am %s" % name)
```

## 装饰器 -- 面向切面编程

借鉴于[ 轻松理解AOP](https://blog.csdn.net/yanquan345/article/details/19760027)

AOP是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种编程范式。这样的学术性定义晦涩难懂，实际上它类似于**将重复代码提取为方法函数，需要时再调用**，这样做的好处不言而喻，相信在代码重构中有更多描述，但是AOP更加的优雅，而且根本目的也并不是这样。
![avator](/img/closure_1.png)
借用刚提到的博客作者的图来讲。当前存在三个业务流程，三者都有一个共同的子流程，也就存在相同的代码，于是我们就想到将其提取出来，要用时，再插入对应的位置，不考虑AOP，我们能想到的就是将其抽取为一个函数，然后在使用的调用即可，这是从代码角度思考。但是，一旦你在该位置写上了这样的一个函数，实际上你就相当于开始编码时就将子流程纳入流程考虑，AOP的**目的就是让你在写代码是只需要先考虑主流程，这些不重要的流程先不考虑，事后再以这种方式插入**，就像图中所示，在一系列纵向控制流中，**将相同子流程提取为一个横向切面**。

具体实现时，以闭包方式不破坏原代码结构，在运行时将代码插入到指定位置，这功能上和直接在代码中加入函数调用是相同的，但却享有闭包的好处。（当然，这只是小部分而已，AOP内容远不止此，并且Python中函数作为first class，Java中AOP也略有不同）