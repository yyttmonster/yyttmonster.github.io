---
layout:     post
title:      "AVL tree or RB tree or Hash?"
subtitle:   " \"No Silver Bullet\""
date:       2020-05-23 09:07:01
author:     "yyttmonster"
header-img: "img/post-bg.jpg"
tags:
    - python
    - AVL
    - RB_Tree
    - dict
---
`c++ std::map`是由红黑树实现的，对于`Hashmap`则有另外的`std::unordered_map`，在`python`中`dict`则是由`hashmap`经由两层映射实现的，那么为什么`python`中没有使用红黑树呢？两者各自存在何种优势？

## 红黑树 or AVL 树

红黑树是一颗平衡二叉搜索树，它在每个结点上使用一个标志位来表示结点颜色，通过约束任何一条从根到叶子结点路径上各结点颜色来实现树的平衡（也可以通过边的颜色，例如左偏红黑树，它更易实现）。树中每个结点定义如下：
```python
class RBNode:
    def __init__(self, k, color="R"):
        self.k= k
        self.color = color
        self.left = None
        self.right = None
        self.parent = None
```
而同时另一类常用平衡树是`AVL tree`，它是通过使用一个树高属性来维护树的平衡，其结点定义如下：
```python
class TreeNode(object):  
    def __init__(self, x):  
        self.val = x  
        self.height = 0  
        self.left = None  
        self.right = None
```
作为平衡二叉树，红黑树与AVL树其实都保证了`O(logn)`时间的查询、插入、删除操作，但实际上两者存在不同，主要是**平衡的严格度**。**红黑树是通过结点颜色约束，实际上它并不严格要求左右子树高度相差小于或等于1，这导致红黑树树高在`logn ~ 2logn`间，而AVL树则是通过高度属性严格限制左右子树高度之差，树高保证在`logn`，这带来了两方面影响，一方面AVL的高严格度使得其查询操作实际优于红黑树，但另一方面却也致使插入和删除操作需要更多的旋转操作来维护这种严苛的平衡性**。

所以红黑树相对于AVL树来说，牺牲了部分平衡性以换取插入/删除操作时少量的旋转操作，整体来说效能要优于AVL树。同时，红黑树作为最常见的可持久化数据结构，需要保证可以高效的回滚到操作之前，此时红黑树一般情况下仅需保存`O(1)`步平衡维护操作，而AVL则是需要`O(logn)`步^[1]。当然，在查询操作远大于更新操作时，AVL 也未尝不是一个更佳的选择。

[^1] [AVL Trees vs. Red-Black Trees?](https://discuss.fogcreek.com/joelonsoftware/default.asp?cmd=show&ixPost=22948)

## 红黑树 or Hash

Hash即散列算法是一种压缩映射，它将任意长度的消息压缩成某一固定长度的消息摘要。Python中是将`hashable`对象（实现了`__hash__`函数）映射输出一个整数。相同输入哈希值相同，当不同输入得到相同的哈希值时，即是发生了碰撞，碰撞可以通过常见的开放定址法、拉链法解决，也可以使用再哈希法或公共溢出区法。
```python
a = '1234abcd'  
print(a.__hash__()) 

-6940744531799389829# 第一次运行
5609426093497104243# 第二次运行
```
需要注意的是，python中（3.3后），存在随机生成secret prefix/suffix的机制，因此对于同一输入，不同解释器进程得到的hash结果可能不同。

*Hashable objects are “salted” with an unpredictable random value. Although they remain constant within an individual Python process, they are not predictable between repeated invocations of Python.*

此外，python进行对象比较时，结果相同所需的唯一特征属性是其具有相同的哈希值；建议的做法是把参与比较的对象全部组件的哈希值混在一起，即将它们打包为一个元组并对该元组做哈希运算。

|        |     Hash Table     |   Red-Black Tree    |
| :----: | :----------------: | :-----------------: |
| Space  |    O(n) : O(n)     |     O(n) : O(n)     |
| Insert |    O(1) : O(n)     | O(log n) : O(log n) |
| Fetch  |    O(1) : O(n)     | O(log n) : O(log n) |
| Delete |    O(1) : O(n)     | O(log n) : O(log n) |
|        | （average: worst） | （average : worst） |

红黑树可以保证即便在最坏情况下依旧能够保持`O(logn)`的时间复杂度，其稳定性高于 Hash方式，并且它不存在哈希冲突，而为了保证`O(1)`的复杂度，一个好的哈希需要保证其负载，因此这会导致存在空间浪费，以及当负载大于负载因子（一般为3/4，2的幂移位操作）时，需要扩容，全部重新进行映射。但一般情况下，Hash的时间复杂度远优于红黑树。

最后需要注意的是，红黑树作为二叉搜索树，它本身保证了元素的有序，python3.6+也通过两级映射实现了“有序”，不过指的是元素插入顺序而非大小顺序。